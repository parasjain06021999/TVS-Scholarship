import { PrismaService } from '../prisma/prisma.service';
import { CreateScholarshipDto } from './dto/create-scholarship.dto';
import { UpdateScholarshipDto } from './dto/update-scholarship.dto';
export declare class ScholarshipsService {
    private prisma;
    constructor(prisma: PrismaService);
    create(createScholarshipDto: CreateScholarshipDto, createdBy: string): Promise<{
        id: string;
        title: string;
        description: string;
        eligibilityCriteria: string;
        amount: number;
        maxAmount: number | null;
        category: import(".prisma/client").$Enums.ScholarshipCategory;
        subCategory: string | null;
        applicationStartDate: Date;
        applicationEndDate: Date;
        academicYear: string;
        isActive: boolean;
        maxApplications: number | null;
        currentApplications: number;
        requirements: import("@prisma/client/runtime/library").JsonValue | null;
        documentsRequired: string[];
        priority: number;
        createdBy: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    findAll(filters: {
        page: number;
        limit: number;
        search?: string;
        category?: string;
        isActive?: boolean;
        minAmount?: number;
        maxAmount?: number;
    }): Promise<{
        data: any;
        meta: {
            total: any;
            page: number;
            limit: number;
            totalPages: number;
        };
    }>;
    findOne(id: string): Promise<{
        applications: ({
            student: {
                id: string;
                firstName: string;
                lastName: string;
                email: string;
            };
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            studentId: string;
            scholarshipId: string;
            status: import(".prisma/client").$Enums.ApplicationStatus;
            applicationData: import("@prisma/client/runtime/library").JsonValue;
            academicInfo: import("@prisma/client/runtime/library").JsonValue | null;
            familyInfo: import("@prisma/client/runtime/library").JsonValue | null;
            financialInfo: import("@prisma/client/runtime/library").JsonValue | null;
            additionalInfo: import("@prisma/client/runtime/library").JsonValue | null;
            reviewerNotes: string | null;
            adminNotes: string | null;
            score: number | null;
            rank: number | null;
            awardedAmount: number | null;
            rejectionReason: string | null;
            remarks: string | null;
            submittedAt: Date | null;
            reviewedAt: Date | null;
            approvedAt: Date | null;
            rejectedAt: Date | null;
        })[];
    } & {
        id: string;
        title: string;
        description: string;
        eligibilityCriteria: string;
        amount: number;
        maxAmount: number | null;
        category: import(".prisma/client").$Enums.ScholarshipCategory;
        subCategory: string | null;
        applicationStartDate: Date;
        applicationEndDate: Date;
        academicYear: string;
        isActive: boolean;
        maxApplications: number | null;
        currentApplications: number;
        requirements: import("@prisma/client/runtime/library").JsonValue | null;
        documentsRequired: string[];
        priority: number;
        createdBy: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    update(id: string, updateScholarshipDto: UpdateScholarshipDto): Promise<{
        id: string;
        title: string;
        description: string;
        eligibilityCriteria: string;
        amount: number;
        maxAmount: number | null;
        category: import(".prisma/client").$Enums.ScholarshipCategory;
        subCategory: string | null;
        applicationStartDate: Date;
        applicationEndDate: Date;
        academicYear: string;
        isActive: boolean;
        maxApplications: number | null;
        currentApplications: number;
        requirements: import("@prisma/client/runtime/library").JsonValue | null;
        documentsRequired: string[];
        priority: number;
        createdBy: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    remove(id: string): Promise<{
        id: string;
        title: string;
        description: string;
        eligibilityCriteria: string;
        amount: number;
        maxAmount: number | null;
        category: import(".prisma/client").$Enums.ScholarshipCategory;
        subCategory: string | null;
        applicationStartDate: Date;
        applicationEndDate: Date;
        academicYear: string;
        isActive: boolean;
        maxApplications: number | null;
        currentApplications: number;
        requirements: import("@prisma/client/runtime/library").JsonValue | null;
        documentsRequired: string[];
        priority: number;
        createdBy: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    getEligibleScholarships(studentId: string): Promise<{
        id: string;
        title: string;
        description: string;
        eligibilityCriteria: string;
        amount: number;
        maxAmount: number | null;
        category: import(".prisma/client").$Enums.ScholarshipCategory;
        subCategory: string | null;
        applicationStartDate: Date;
        applicationEndDate: Date;
        academicYear: string;
        isActive: boolean;
        maxApplications: number | null;
        currentApplications: number;
        requirements: import("@prisma/client/runtime/library").JsonValue | null;
        documentsRequired: string[];
        priority: number;
        createdBy: string;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    getScholarshipStats(id: string): Promise<{
        totalApplications: number;
        approvedApplications: number;
        pendingApplications: number;
        rejectedApplications: number;
        totalAwardedAmount: number;
        remainingApplications: number;
    }>;
    toggleActive(id: string): Promise<{
        id: string;
        title: string;
        description: string;
        eligibilityCriteria: string;
        amount: number;
        maxAmount: number | null;
        category: import(".prisma/client").$Enums.ScholarshipCategory;
        subCategory: string | null;
        applicationStartDate: Date;
        applicationEndDate: Date;
        academicYear: string;
        isActive: boolean;
        maxApplications: number | null;
        currentApplications: number;
        requirements: import("@prisma/client/runtime/library").JsonValue | null;
        documentsRequired: string[];
        priority: number;
        createdBy: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    toggleStatus(id: string): Promise<{
        id: string;
        title: string;
        description: string;
        eligibilityCriteria: string;
        amount: number;
        maxAmount: number | null;
        category: import(".prisma/client").$Enums.ScholarshipCategory;
        subCategory: string | null;
        applicationStartDate: Date;
        applicationEndDate: Date;
        academicYear: string;
        isActive: boolean;
        maxApplications: number | null;
        currentApplications: number;
        requirements: import("@prisma/client/runtime/library").JsonValue | null;
        documentsRequired: string[];
        priority: number;
        createdBy: string;
        createdAt: Date;
        updatedAt: Date;
    }>;
    findActive(): Promise<{
        id: string;
        title: string;
        description: string;
        eligibilityCriteria: string;
        amount: number;
        maxAmount: number | null;
        category: import(".prisma/client").$Enums.ScholarshipCategory;
        subCategory: string | null;
        applicationStartDate: Date;
        applicationEndDate: Date;
        academicYear: string;
        isActive: boolean;
        maxApplications: number | null;
        currentApplications: number;
        requirements: import("@prisma/client/runtime/library").JsonValue | null;
        documentsRequired: string[];
        priority: number;
        createdBy: string;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    getApplications(scholarshipId: string, filters: any): Promise<{
        data: ({
            student: {
                firstName: string;
                lastName: string;
                phone: string;
            };
        } & {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            studentId: string;
            scholarshipId: string;
            status: import(".prisma/client").$Enums.ApplicationStatus;
            applicationData: import("@prisma/client/runtime/library").JsonValue;
            academicInfo: import("@prisma/client/runtime/library").JsonValue | null;
            familyInfo: import("@prisma/client/runtime/library").JsonValue | null;
            financialInfo: import("@prisma/client/runtime/library").JsonValue | null;
            additionalInfo: import("@prisma/client/runtime/library").JsonValue | null;
            reviewerNotes: string | null;
            adminNotes: string | null;
            score: number | null;
            rank: number | null;
            awardedAmount: number | null;
            rejectionReason: string | null;
            remarks: string | null;
            submittedAt: Date | null;
            reviewedAt: Date | null;
            approvedAt: Date | null;
            rejectedAt: Date | null;
        })[];
        pagination: {
            page: any;
            limit: any;
            total: number;
            pages: number;
        };
    }>;
    getStats(): Promise<{
        total: number;
        active: number;
        applications: number;
        totalAmount: number;
    }>;
    checkEligibility(eligibilityData: any): Promise<{
        eligible: boolean;
        reasons: any[];
        suggestedScholarships: any[];
    }>;
}
