import { ApplicationsService } from './applications.service';
import { CreateApplicationDto } from './dto/create-application.dto';
import { ReviewApplicationDto } from './dto/review-application.dto';
export declare class ApplicationsController {
    private readonly applicationsService;
    constructor(applicationsService: ApplicationsService);
    findAll(req: any, query: any): Promise<{
        success: boolean;
        message: string;
        data: any;
    }>;
    create(createApplicationDto: CreateApplicationDto, req: any): Promise<{
        success: boolean;
        message: string;
        applicationId: string;
        data: {
            student: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                firstName: string;
                lastName: string;
                email: string | null;
                phone: string | null;
                dateOfBirth: Date;
                gender: import(".prisma/client").$Enums.Gender;
                aadharNumber: string | null;
                panNumber: string | null;
                fatherName: string;
                fatherOccupation: string | null;
                motherName: string;
                motherOccupation: string | null;
                familyIncome: number | null;
                emergencyContact: string | null;
                userId: string;
                address: string;
                city: string;
                state: string;
                pincode: string;
                country: string;
                profileImage: string | null;
                isVerified: boolean;
            };
            scholarship: {
                id: string;
                createdAt: Date;
                updatedAt: Date;
                category: import(".prisma/client").$Enums.ScholarshipCategory;
                title: string;
                description: string;
                eligibilityCriteria: string;
                amount: number;
                maxAmount: number | null;
                subCategory: string | null;
                applicationStartDate: Date;
                applicationEndDate: Date;
                academicYear: string;
                isActive: boolean;
                maxApplications: number | null;
                currentApplications: number;
                requirements: import("@prisma/client/runtime/library").JsonValue | null;
                documentsRequired: string[];
                priority: number;
                createdBy: string;
            };
            documents: {
                id: string;
                rejectionReason: string | null;
                studentId: string;
                isVerified: boolean;
                applicationId: string | null;
                type: import(".prisma/client").$Enums.DocumentType;
                fileName: string;
                originalName: string;
                filePath: string;
                fileSize: number;
                mimeType: string;
                verifiedBy: string | null;
                verifiedAt: Date | null;
                uploadedAt: Date;
            }[];
            payments: {
                id: string;
                status: import(".prisma/client").$Enums.PaymentStatus;
                remarks: string | null;
                createdAt: Date;
                updatedAt: Date;
                bankName: string | null;
                accountNumber: string | null;
                ifscCode: string | null;
                accountHolderName: string | null;
                amount: number;
                applicationId: string;
                paymentMethod: string | null;
                transactionId: string | null;
                paymentDate: Date | null;
                bankReference: string | null;
                upiReference: string | null;
                failureReason: string | null;
                processedAt: Date | null;
                processedBy: string | null;
            }[];
        } & {
            id: string;
            status: import(".prisma/client").$Enums.ApplicationStatus;
            applicationData: import("@prisma/client/runtime/library").JsonValue;
            academicInfo: import("@prisma/client/runtime/library").JsonValue | null;
            familyInfo: import("@prisma/client/runtime/library").JsonValue | null;
            financialInfo: import("@prisma/client/runtime/library").JsonValue | null;
            additionalInfo: import("@prisma/client/runtime/library").JsonValue | null;
            reviewerNotes: string | null;
            adminNotes: string | null;
            score: number | null;
            rank: number | null;
            awardedAmount: number | null;
            rejectionReason: string | null;
            remarks: string | null;
            submittedAt: Date | null;
            reviewedAt: Date | null;
            approvedAt: Date | null;
            rejectedAt: Date | null;
            createdAt: Date;
            updatedAt: Date;
            studentId: string;
            scholarshipId: string;
        };
        error?: undefined;
        details?: undefined;
    } | {
        success: boolean;
        message: any;
        error: any;
        details: any;
        applicationId?: undefined;
        data?: undefined;
    }>;
    findOne(req: any, id: string): Promise<{
        student: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            firstName: string;
            lastName: string;
            email: string | null;
            phone: string | null;
            dateOfBirth: Date;
            gender: import(".prisma/client").$Enums.Gender;
            aadharNumber: string | null;
            panNumber: string | null;
            fatherName: string;
            fatherOccupation: string | null;
            motherName: string;
            motherOccupation: string | null;
            familyIncome: number | null;
            emergencyContact: string | null;
            userId: string;
            address: string;
            city: string;
            state: string;
            pincode: string;
            country: string;
            profileImage: string | null;
            isVerified: boolean;
        };
        scholarship: {
            id: string;
            createdAt: Date;
            updatedAt: Date;
            category: import(".prisma/client").$Enums.ScholarshipCategory;
            title: string;
            description: string;
            eligibilityCriteria: string;
            amount: number;
            maxAmount: number | null;
            subCategory: string | null;
            applicationStartDate: Date;
            applicationEndDate: Date;
            academicYear: string;
            isActive: boolean;
            maxApplications: number | null;
            currentApplications: number;
            requirements: import("@prisma/client/runtime/library").JsonValue | null;
            documentsRequired: string[];
            priority: number;
            createdBy: string;
        };
        documents: {
            id: string;
            rejectionReason: string;
            isVerified: boolean;
            type: import(".prisma/client").$Enums.DocumentType;
            fileName: string;
            originalName: string;
            filePath: string;
            fileSize: number;
            mimeType: string;
            verifiedBy: string;
            verifiedAt: Date;
            uploadedAt: Date;
        }[];
        payments: {
            id: string;
            status: import(".prisma/client").$Enums.PaymentStatus;
            remarks: string | null;
            createdAt: Date;
            updatedAt: Date;
            bankName: string | null;
            accountNumber: string | null;
            ifscCode: string | null;
            accountHolderName: string | null;
            amount: number;
            applicationId: string;
            paymentMethod: string | null;
            transactionId: string | null;
            paymentDate: Date | null;
            bankReference: string | null;
            upiReference: string | null;
            failureReason: string | null;
            processedAt: Date | null;
            processedBy: string | null;
        }[];
    } & {
        id: string;
        status: import(".prisma/client").$Enums.ApplicationStatus;
        applicationData: import("@prisma/client/runtime/library").JsonValue;
        academicInfo: import("@prisma/client/runtime/library").JsonValue | null;
        familyInfo: import("@prisma/client/runtime/library").JsonValue | null;
        financialInfo: import("@prisma/client/runtime/library").JsonValue | null;
        additionalInfo: import("@prisma/client/runtime/library").JsonValue | null;
        reviewerNotes: string | null;
        adminNotes: string | null;
        score: number | null;
        rank: number | null;
        awardedAmount: number | null;
        rejectionReason: string | null;
        remarks: string | null;
        submittedAt: Date | null;
        reviewedAt: Date | null;
        approvedAt: Date | null;
        rejectedAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
        studentId: string;
        scholarshipId: string;
    }>;
    review(id: string, reviewApplicationDto: ReviewApplicationDto, req: any): Promise<{
        id: string;
        status: import(".prisma/client").$Enums.ApplicationStatus;
        applicationData: import("@prisma/client/runtime/library").JsonValue;
        academicInfo: import("@prisma/client/runtime/library").JsonValue | null;
        familyInfo: import("@prisma/client/runtime/library").JsonValue | null;
        financialInfo: import("@prisma/client/runtime/library").JsonValue | null;
        additionalInfo: import("@prisma/client/runtime/library").JsonValue | null;
        reviewerNotes: string | null;
        adminNotes: string | null;
        score: number | null;
        rank: number | null;
        awardedAmount: number | null;
        rejectionReason: string | null;
        remarks: string | null;
        submittedAt: Date | null;
        reviewedAt: Date | null;
        approvedAt: Date | null;
        rejectedAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
        studentId: string;
        scholarshipId: string;
    }>;
    approve(id: string, req: any): Promise<{
        id: string;
        status: import(".prisma/client").$Enums.ApplicationStatus;
        applicationData: import("@prisma/client/runtime/library").JsonValue;
        academicInfo: import("@prisma/client/runtime/library").JsonValue | null;
        familyInfo: import("@prisma/client/runtime/library").JsonValue | null;
        financialInfo: import("@prisma/client/runtime/library").JsonValue | null;
        additionalInfo: import("@prisma/client/runtime/library").JsonValue | null;
        reviewerNotes: string | null;
        adminNotes: string | null;
        score: number | null;
        rank: number | null;
        awardedAmount: number | null;
        rejectionReason: string | null;
        remarks: string | null;
        submittedAt: Date | null;
        reviewedAt: Date | null;
        approvedAt: Date | null;
        rejectedAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
        studentId: string;
        scholarshipId: string;
    }>;
    reject(id: string, body: {
        rejectionReason?: string;
    }, req: any): Promise<{
        id: string;
        status: import(".prisma/client").$Enums.ApplicationStatus;
        applicationData: import("@prisma/client/runtime/library").JsonValue;
        academicInfo: import("@prisma/client/runtime/library").JsonValue | null;
        familyInfo: import("@prisma/client/runtime/library").JsonValue | null;
        financialInfo: import("@prisma/client/runtime/library").JsonValue | null;
        additionalInfo: import("@prisma/client/runtime/library").JsonValue | null;
        reviewerNotes: string | null;
        adminNotes: string | null;
        score: number | null;
        rank: number | null;
        awardedAmount: number | null;
        rejectionReason: string | null;
        remarks: string | null;
        submittedAt: Date | null;
        reviewedAt: Date | null;
        approvedAt: Date | null;
        rejectedAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
        studentId: string;
        scholarshipId: string;
    }>;
    getStats(req: any): Promise<{
        total: number;
        approved: number;
        pending: number;
        rejected: number;
        totalAmountDisbursed: number;
        totalStudents: number;
        totalScholarships: number;
    }>;
}
